#load libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)

#get and set working directory for R studio
getwd()
setwd("C:/User/Documents/destination_folder/Divvy_Exercises")

#upload Divvy datasets
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")

#compare column names
colnames(q1_2019)
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)


#rename columns
q2_2019 <- rename(q2_2019
                  ,"trip_id" ="01 - Rental Details Rental ID" 
                  ,"start_time" = "01 - Rental Details Local Start Time"  
                  ,"end_time"= "01 - Rental Details Local End Time" 
                  , "bikeid" = "01 - Rental Details Bike ID"
                  , "tripduration" = "01 - Rental Details Duration In Seconds Uncapped"
                  ,"from_station_id" = "03 - Rental Start Station ID"
                  ,"from_station_name" = "03 - Rental Start Station Name" 
                  ,"to_station_id" = "02 - Rental End Station ID" 
                  ,"to_station_name" = "02 - Rental End Station Name" 
                  , "usertype" = "User Type" 
                  , "gender" = "Member Gender" 
                  , "birthyear" = "05 - Member Details Member Birthday Year")
                 
#Inspect data and look for incongruencies
str(q1_2019)
str(q2_2019)
str(q3_2019)
str(q4_2019)


#trip_id and bikeid column datatyp was converted to Chr to allow stacking of dataframes
# Convert trip_id and bikeid to character so that they can stack correctly
q4_2019 <-  mutate(q4_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid)) 
q3_2019 <-  mutate(q3_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid)) 
q2_2019 <-  mutate(q2_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid)) 
q1_2019 <-  mutate(q1_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid))
                   
                   
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2019)

#CLEANING
#Statistical summary of data
summary(all_trips)

#Checking for duplicate data in rows
length(unique(all_trips$trip_id)) == nrow(all_trips)

#Drop missing values
all_trips <- all_trips %>% drop_na()


#change subscriber customer to member and casual
all_trips <-  all_trips %>% 
  mutate(usertype = recode(usertype
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Add columns that list the date, month, day, and year of each ride

all_trips$date <- as.Date(all_trips$start_time) #The default format is yyyy-mm-dd

all_trips$month <- format(as.Date(all_trips$date), "%B")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")


# Compare members and casual users
aggregate(all_trips$tripduration ~ all_trips$usertype, FUN = mean)
aggregate(all_trips$tripduration ~ all_trips$usertype, FUN = median)
aggregate(all_trips$tripduration ~ all_trips$usertype, FUN = max)
aggregate(all_trips$tripduration ~ all_trips$usertype, FUN = min)


# See the average ride time by each day for members vs casual users
aggregate(all_trips$tripduration ~ all_trips$usertype + all_trips$day_of_week, FUN = mean)


# Ordering the Days of the week.
all_trips$day_of_week <- ordered(all_trips$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

#Average ride time by each day for members vs casual users
aggregate(all_trips$tripduration ~ all_trips$usertype + all_trips$day_of_week, FUN = mean)


#Analyze ridership data by type and weekday
all_trips %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(usertype, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()                           #calculates the number of rides and average duration 
            ,average_duration = mean(tripduration)) %>%         # calculates the average duration
  arrange(usertype, weekday)
  
  #SHARE
  #Number of rides by rider type
all_trips %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(usertype, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(tripduration)) %>% 
  arrange(usertype, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = usertype)) +
  geom_col(position = "dodge")
  
  #Average tripduration
all_trips %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(usertype, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(tripduration)) %>% 
  arrange(usertype, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = usertype)) +
  geom_col(position = "dodge")
  
  
  #Average number of rides per month
all_trips %>% 
  group_by(month, usertype) %>% 
  summarize(number_of_rides = n(), .groups = 'drop') %>% 
  filter(usertype == 'casual') %>%
  drop_na() %>%
  ggplot(aes(x = month, y = number_of_rides, fill = usertype)) + 
  geom_bar(position = 'dodge', stat = 'identity') + scale_y_continuous(labels = scales::comma) +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "Month", y = "Number of Rides", 
       fill = "usertype",
       title = "Average Number of Rides per month:Casual Rider")
       
all_trips %>% 
  group_by(month, usertype) %>% 
  summarize(number_of_rides = n(), .groups = 'drop') %>% 
  filter(usertype == 'member') %>%
  drop_na() %>%
  ggplot(aes(x = month, y = number_of_rides, fill = usertype)) + 
  geom_bar(position = 'dodge', stat = 'identity') + scale_y_continuous(labels = scales::comma) +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "Month", y = "Number of Rides", 
       fill = "usertype",
       title = "Average Number of Rides per month:Member Rider")


#Create a dataframe for stations all_stations_v2, all_stations_member and all_stations_casual
all_stations <- bind_rows(data.frame("stations" = all_trips$from_station_name, 
                                     "usertype" = all_trips$usertype),
                          data.frame("stations" = all_trips$to_station_name,
                                     "usertype" = all_trips$usertype))
all_stations_v2 <- all_stations[!(all_stations$stations == "" | is.na(all_stations$stations)),]
all_stations_member <- all_stations_v2[all_stations_v2$usertype == 'member',]
all_stations_casual <- all_stations_v2[all_stations_v2$usertype == 'casual',]


#Top 10 stations
top_10_station <- all_stations_v2 %>% 
  group_by(stations) %>% 
  summarise(station_count = n()) %>% 
  arrange(desc(station_count)) %>% 
  slice(1:10)
top_10_station


#Top 10 stations for member riders
top_10_station_member <- all_stations_member %>% 
  group_by(stations) %>% 
  summarise(station_count = n()) %>% 
  arrange(desc(station_count)) %>% 
  head(n=10)
top_10_station_member



#Top 10 stations for casual riders
top_10_station_casual <- all_stations_casual %>% 
  group_by(stations) %>% 
  summarise(station_count = n()) %>% 
  arrange(desc(station_count)) %>% 
  head(n=10)
top_10_station_casual


#Average rides by hour
str(all_trips)
all_trips$start_time <- as.POSIXct(all_trips$start_time, "%Y-%m-%d %H:%M:%S")      
str(all_trips)
#Average riders per hour for casual riders
all_trips %>%
  filter(usertype == 'casual') %>%
  group_by(hour_of_day = hour(round_date(start_time, 'hour'))) %>% 
  group_by(hour_of_day, usertype) %>% 
  summarize(number_of_rides = n(), .groups = 'drop') %>% 
  arrange(-number_of_rides) %>% 
  ggplot(aes(x = hour_of_day, y = number_of_rides, fill = usertype)) +
  geom_bar(position = 'dodge', stat = 'identity') + scale_y_continuous(labels = scales::comma) +
  scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)) +
  labs(x = "Time of the Day (h)", y = "Number of Rides", 
       fill = "Casual",
       title = "Average Number of Rides per Hour: Casual Riders")
       
#average riders per hour for casual riders
all_trips %>%
  filter(usertype == 'member') %>%
  group_by(hour_of_day = hour(round_date(start_time, 'hour'))) %>% 
  group_by(hour_of_day, usertype) %>% 
  summarize(number_of_rides = n(), .groups = 'drop') %>% 
  arrange(-number_of_rides) %>% 
  ggplot(aes(x = hour_of_day, y = number_of_rides, fill = usertype)) +
  geom_bar(position = 'dodge', stat = 'identity') + scale_y_continuous(labels = scales::comma) +
  scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)) +
  labs(x = "Time of the Day (h)", y = "Number of Rides", 
       fill = "Member",
       title = "Average Number of Rides per Hour: Member Riders")  
       
#Bike Usage between Members and Casual Riders by Day of Week across the Year
options(repr.plot.width = 35, repr.plot.height = 10)
all_trips %>% 
  group_by(month, day_of_week, usertype) %>% 
  summarize(number_of_rides = n(), .groups = 'drop') %>% 
  drop_na() %>% 
  ggplot(aes(x = day_of_week, y = number_of_rides, fill = usertype)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(usertype~month) +
  labs(x = "Day of Week", y = "Number of Rides", fill = "Member/Casual",
       title = "Bike Usage between Members and Casual Riders per Day of Week for 2019", fill = 'Member/Casual') +
  theme(axis.text.x = element_text(angle = 90))       
       
       
       

       
  
                                

                   
                 
                  
